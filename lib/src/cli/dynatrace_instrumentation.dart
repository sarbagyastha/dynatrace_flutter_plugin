import 'dart:io';

import 'package:dynatrace_flutter_plugin/src/agent/model/log_level.dart';
import 'package:dynatrace_flutter_plugin/src/cli/config/model/cli_arguments.dart';

import 'package:dynatrace_flutter_plugin/src/agent/util/logger.dart';
// DONT CHANGE THIS PATH - AS THIS FILE IS AUTOMATICALLY GENERATED BY BUILD
import 'package:dynatrace_flutter_plugin/src/cli/util/version.dart';
import 'package:dynatrace_flutter_plugin/src/cli/util/pathConstants.dart';
import 'package:dynatrace_flutter_plugin/src/cli/config/model/config.dart';
import 'package:dynatrace_flutter_plugin/src/cli/config/android_configurator.dart';
import 'package:dynatrace_flutter_plugin/src/cli/config/ios_configurator.dart';

/// Main setup configuration routine which accepts [arguments].
/// Currently they stay untouched as this will be fixed with another story.
Future<void> setupConfiguration(
    PathConstants paths, List<String> arguments) async {
  Logger().i("Dynatrace Flutter Plugin ${getVersion()}");

  // Read CommandLine
  CommandLineArguments readArguments =
      CommandLineArguments.parseArgumentList(paths, arguments);

  Logger().i("Trying to read configuration file: " + readArguments.configPath!);
  await checkIfConfigurationFileIsAvailable(readArguments);

  String contentYaml = await File(readArguments.configPath!).readAsString();
  Configuration config = Configuration(contentYaml);
  Logger().logLevel = readArguments.isDebug! ? LogLevel.Debug : LogLevel.Info;

  bool iosAvailable = await Directory(paths.getIosFolder()).exists();
  bool androidAvailable = await Directory(paths.getAndroidFolder()).exists();

  if (iosAvailable || androidAvailable) {
    // Try to read configuration
    try {
      // Try to instrument platform
      if (androidAvailable) {
        try {
          AndroidConfigurator configurator =
              AndroidConfigurator(paths, readArguments, null);
          if (!readArguments.isUninstall!) {
            Logger().d("Starting Android Configuration with Dynatrace!");
            await configurator.instrumentAndroidPlatform();
            await configurator
                .writeGradleConfig(config.getAndroidConfiguration()!);
          } else {
            Logger()
                .d("Starting removal of Dynatrace configuration for Android!");
            await configurator.removeGradleLinesForUninstall();
            await configurator.removeDynatraceGradleFiles();
          }
        } catch (error) {
          Logger().i(error.toString(), logType: LogType.Error);
        } finally {
          !readArguments.isUninstall!
              ? Logger().d("Finished Android Configuration with Dynatrace!")
              : Logger()
                  .d("Finished removing Dynatrace configuration for Android!");
        }
      }

      if (iosAvailable) {
        try {
          !readArguments.isUninstall!
              ? Logger().d("Starting iOS Configuration with Dynatrace!")
              : Logger()
                  .d("Starting removal of Dynatrace configuration for iOS!");
          IosConfigurator configurator = IosConfigurator(readArguments, null);
          await configurator.modifyPListFile(config.getIosConfiguration()!,
              isUninstall: readArguments.isUninstall);
        } catch (error) {
          Logger().i(error.toString(), logType: LogType.Error);
        } finally {
          !readArguments.isUninstall!
              ? Logger().d("Finished iOS Configuration with Dynatrace!")
              : Logger()
                  .d("Finished removing Dynatrace configuration for iOS!");
        }
      }
    } catch (error) {
      Logger().i(error.toString(), logType: LogType.Error);
    }
  } else {
    Logger().d(
        "Both Android and iOS Folder are not available - Skip instrumentation.",
        logType: LogType.Warning);
  }

  Logger().i("Finished configuration of Flutter application ..");
}

/// Checks if the configuration file is available - if not it will throw an exception
Future<void> checkIfConfigurationFileIsAvailable(
    CommandLineArguments arguments) async {
  File config = File(arguments.configPath!);

  if (await config.exists()) {
    Logger().d("Configuration found!");
  } else {
    Logger().i("dynatrace.config.yaml not found!", logType: LogType.Error);
    throw FileSystemException("dynatrace.config.yaml not found!");
  }
}
